import { UserConfig } from "unocss";
import { _makeClass, _makeRegex, _mergeDefaults } from "../../helpers/core";
import { Config, ConfigPick } from "../../models/config";

/**
 * Create a theme function that could be scanned by unocss through variants and rules.
 * Uses rule to extract styles according to rule specs, like `class=theme:bg-bg` which 
 * use the base tag `\<html theme="li">` to apply theme class.
 * Final class looks like `theme:(bg-li-bg)`
 * @param _rule properties to setup rule expression and specifiy how rule is being used in app.
 * @param _unocssConfig unocss configs to append data generated by this function to.
 * @param config misc data to help with extra functionalities.
 * @returns theme variant and rule-set to be added to unocss's config.
 */
export function ThemeRule(
    _rule: Config["rule"],
    _unocssConfig: Config["unocssConfig"],
    config?: ConfigPick<"debug" | "splits">
): UserConfig {
    const { unocssConfig, debug, rule, splits } = _mergeDefaults({
        ...config,
        rule: _rule,
        unocssConfig: _unocssConfig,
    });
    // check if needed transformers exist
    {
        const transformersNames = Object.values(unocssConfig.transformers).map(
            (t) => t.name
        );
        rule.transformerDeps.forEach((t) => {
            if (!transformersNames.includes(t)) {
                throw Error(
                    "can't make rule without " +
                    t +
                    " transformer, please add it to your unocss config."
                );
            }
        });
    }
    if (
        !rule.mainVar ||
        rule.mainVar.length <= 0 ||
        rule.mainVar.match(/^[\W]*$/)
    ) {
        console.warn("rule mainVar has been changed to 'theme'");
        rule.mainVar = "theme";
    }
    // create needed regex string
    const ruleExp = _makeRegex([
        {
            ids: rule.mainVar,
            idPostfix: rule.connectors, // + "?", // omit function paramteres
            groupName: "pattern",
            match: "[^\\s].+?",
        },
    ]);
    if (typeof rule.variants === "string")
        rule.variants = rule.variants.split("|");
    const variantExp = _makeRegex([
        {
            ids: "_" + rule.mainVar,
            idPostfix: rule.connectors,
            groupName: "mainVar",
            idStyle: "inside",
            // match: "",
        },
        {
            ids: rule.variants.join("|"),
            idStyle: "inside",
            idPostfix: rule.connectors,
            groupName: "variant",
            optional: true,
            // match: "",
        },
        {
            ids: "",
            groupName: "pattern",
        },
    ]);

    // add theme layer to main themes
    {
        const layers = Object.values(unocssConfig.layers);
        unocssConfig.layers[rule.mainVar] = layers[layers.length - 1] + 1;
    }

    // make variants
    unocssConfig.variants.push((matcher) => {
        // if (!matcher.startsWith("_" + rule.mainVar)) {
        // return matcher;
        // }
        const groups = matcher.match(variantExp)?.groups;
        if (!groups) {
            return matcher;
        }
        let { mainVar, variant, pattern } = groups;
        variant = variant.replace(":", "");
        // console.log(mainVar, " :: ", variant, " :: ", pattern);
        return {
            matcher: pattern,
            selector: (s) => {
                if (rule.variantStyle === "class")
                    return `.${rule.mainVar} ${s}-${variant}`;
                if (rule.variantStyle === "class-attached")
                    return `.${rule.mainVar}-${variant} ${s}`;
                if (rule.variantStyle === "variant-prefix") return `.${variant}-${s}`;
                return `[${rule.mainVar}="${variant}"] ${s}`;
            },
        };
    });

    // make rule
    unocssConfig.rules.push([
        ruleExp,
        ({ groups: { pattern } }) => {
            const result = { [rule.directiveVar]: ` "` };
            let style = _makeClass(pattern, { splits, debug }).split(
                // new RegExp(splits.rule, "g")
                "-"
            );
            if (style.length <= 1) {
                console.warn(
                    "theme rule function needs a pattern with a rule" +
                    splits.rule +
                    "tag"
                );
                return { [rule.directiveVar]: `""` };
            }
            // ruleVar value doesn't have to be short and/or
            // readable because it's never seen or loaded.
            (rule.variants as string[]).forEach((t, i) => {
                let n = style.join("-" + t + "-");
                if (i === 0) result[rule.directiveVar] += n;
                else
                    result[rule.directiveVar] +=
                        " _" + rule.mainVar + ":" + t + ":" + "(" + n + ")";
            });
            result[rule.directiveVar] += `"`;
            if (debug.style !== "off" && pattern.startsWith(debug.id)) {
                console.info(result);
            }
            return result;
        },
        { layer: rule.mainVar },
    ]);
    return unocssConfig;
}